package com.winfo.project2.client.basic.GUI;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.DesignRoot;
import com.vaadin.server.FontAwesome;
import com.vaadin.ui.*;
import com.vaadin.ui.declarative.Design;
import com.winfo.project2.client.basic.connection.ServerConnector;
import com.winfo.project2.client.basic.data.Settings;
import com.winfo.project2.client.basic.helper;
import com.winfo.project2.client.plugins.WebsiteParser;

/**
 * Created by patrick on 13.06.17.
 */
public class UploadUI extends MainUI {
    public static final String VIEW_NAME = "upload";

    public UploadUI() {

    }

    public VerticalLayout getLayout () {

        Label headerLabel = new Label();
        headerLabel.setStyleName("h1");
        VerticalLayout vertical = new VerticalLayout ();

        headerLabel.setValue("Upload");

        Settings settings = helper.getSettings();
        //input form
        FormLayout form = new FormLayout();

        TextField fileType = new TextField("File Type");

        fileType.setRequiredIndicatorVisible(true);
        fileType.setIcon(FontAwesome.SITEMAP);

        TextField path = new TextField("Path");
        path.setIcon(FontAwesome.EXTERNAL_LINK);
        path.setRequiredIndicatorVisible(true);


        form.addComponents(fileType, path);

        Button button = new Button("Save me");
        form.addComponent(button);
        //Button click
        button.addClickListener( e -> {
            final int[] status = new int[1];
            new Thread(() -> {
                //create new entity object from parsed website
                WebsiteParser websiteParser = new WebsiteParser(path.getValue());

                //create json out of new object
                String json = helper.objectToJson(websiteParser.parse());

                //post json through serverconnector
                ServerConnector serverConnector = new ServerConnector("http://"+settings.getIpaddress()+":"+settings.getPort());

                status[0] = serverConnector.postJSON("/entities", json);

            }).start();
            try {
                Thread.sleep(3000);

                if(status[0] == 201){
                    vertical.addComponent(new Label(status[0] +" saved"));
                }
                else{
                    vertical.addComponent(new Label("error"));
                }
            } catch (InterruptedException e1) {
                e1.printStackTrace();
            }
        });


        vertical.addComponents(headerLabel, form);

//        mainContent.removeAllComponents();
//        mainContent.addComponents(vertical);
        return vertical;
    }
}
